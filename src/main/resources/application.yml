server:
  port: 8080
spring:
  application:
    name: hello-spring-boot
  profiles:
    active: dev
  redis:
    # Redis服务器地址
    timeout: 500ms # 连接超时时间（毫秒）
    lettuce:
      pool:
        ## 连接池中的最大空闲连接
        max-idle: 8
        ## 连接池中的最小空闲连接
        min-idle: 0
        ## 连接池最大连接数（使用负值表示没有限制）
        max-active: 8
        # 连接池最大阻塞等待时间（使用负值表示没有限制
        max-wait: -1
      shutdown-timeout: 100
  cache:
    redis:
      time-to-live:
        seconds: 7200
#  cache:
#    type: caffeine
#    cache-names: outLimit,notOutLimit,myCache
#    caffeine:
#      spec: initialCapacity=50,maximumSize=500,expireAfterWrite=5s,refreshAfterWrite=7s
  datasource:
    # https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      initial-size: 3 #初始化时建立物理连接的个数
      min-idle: 3 #最小连接池数量
      max-active: 10 #最大连接池数量
      max-wait: 60000 #获取连接时最大等待时间
      stat-view-servlet:
        login-username: admin #配置监控页面访问登录名称
        login-password: admin #配置监控页面访问密码
      filter:
        stat:
          log-slow-sql: true #是否开启慢sql查询监控
          slow-sql-millis: 1 #慢SQL执行时间

rocketmq:
  producer:
    group: risk-data-message-group


#  配置全局属性
mybatis:
  mapper-locations: classpath:mybatis/mapper/**/*Mapper.xml
  configuration:
    cache-enabled: false
    # 使用jdbc的getGeneratekeys获取自增主键值，该设置影响oracle数据库插入数据时回写主键
    use-generated-keys: false
    # 使用列别名替换列名　　默认值为true
    #        select name as title(实体中的属性名是title) form table;
    #        开启后mybatis会自动帮我们把表中name的值赋到对应实体的title属性中
    use-column-label: true
    # 开启驼峰命名转换Table:create_time到 Entity(createTime)
    map-underscore-to-camel-case: true
    #另外一种打印语句的方式
    log-impl: org.apache.ibatis.logging.log4j2.Log4j2Impl
    jdbc-type-for-null: null
#    log-prefix: dao.
# 分页插件
pagehelper:
  # 默认值为 false，该参数对使用 RowBounds 作为分页参数时有效。
  # 当该参数设置为 true 时，会将 RowBounds 中的 offset 参数当成 pageNum 使用，可以用页码和页面大小两个参数进行分页。
  offset-as-page-num: false
  # 默认值为false，该参数对使用 RowBounds 作为分页参数时有效。 当该参数设置为true时，使用 RowBounds 分页会进行 count 查询。
  row-bounds-with-count: true
  # 默认值为 false，当该参数设置为 true 时，如果 pageSize=0 或者 RowBounds.limit = 0 就会查询出全部的结果
  #            （相当于没有执行分页查询，但是返回结果仍然是 Page 类型）。
  page-size-zero: false
  # 分页合理化参数，默认值为false。当该参数设置为 true 时，pageNum<=0 时会查询第一页， pageNum>pages（超过总数时），会查询
  #            最后一页。默认false 时，直接根据参数进行查询。
  reasonable: false
  # 为了支持startPage(Object params)方法，增加了该参数来配置参数映射，用于从对象中根据属性名取值， 可以配置
  #            pageNum,pageSize,count,pageSizeZero,reasonable，不配置映射的用默认值
  #            默认值为pageNum=pageNum;pageSize=pageSize;count=countSql;reasonable=reasonable;pageSizeZero=pageSizeZero。
  params: pageNum=pageNum;pageSize=pageSize;count=countSql;reasonable=reasonable;pageSizeZero=pageSizeZero
  # 支持通过 Mapper 接口参数来传递分页参数，默认值false，分页插件会从查询方法的参数值中，自动根据上面 params 配置的字段中
  #            取值，查找到合适的值时就会自动分页。
  #            使用方法可以参考测试代码中的 com.github.pagehelper.test.basic 包下的 ArgumentsMapTest 和 ArgumentsObjTest。
  support-methods-arguments: false
  # 默认值为 false。设置为 true 时，允许在运行时根据多数据源自动识别对应方言的分页 （不支持自动选择sqlserver2012，只能使用
  #            sqlserver）
  auto-runtime-dialect: true
  # 默认值为 true。当使用运行时动态数据源或没有设置 helperDialect 属性自动获取数据库类型时，会自动获取一个数据库连接， 通过该属性来设置是否关闭获取的这个连接
  #            默认true关闭，设置为 false 后，不会关闭获取的连接，这个参数的设置要根据自己选择的数据源来决定。
  close-conn: true